#ifndef PAIR_H
#define PAIR_H

#include "AdtException.h"

#include <ostream>
#include <string>

using std::string;
using std::ostream;
using std::endl;
using std::bad_alloc; 

template <class K, class V>
class Pair
{
public:
	Pair() = default;
	explicit Pair(const K key, const V value) noexcept(false);
	Pair(const Pair & copy) noexcept(false);
	~Pair();
	Pair<K, V> & operator=(const Pair<K, V> & rhs) noexcept(false);
	explicit Pair(Pair<K, V>&& pair) noexcept; //  use this for array.h operator && array
	Pair<K, V>& operator=(Pair<K, V> && rhs) noexcept(false);
	bool operator==(const Pair & rhs) noexcept;
	bool operator==(const Pair & rhs) const noexcept;
	K GetKey() noexcept;
	K GetKey() const noexcept;
	V GetValue() noexcept;
	V GetValue() const noexcept;
	void SetKey(const K & new_key) noexcept(false);
	void SetValue(const V & new_value) noexcept(false);

	friend ostream & operator<<(ostream & stream, const Pair<K, V> & pair);

private:
	K * key_ = nullptr;
	V * value_ = nullptr;
};

template <class K, class V>
inline Pair<K, V>::Pair(const K key, const V value) noexcept(false)
{
	try
	{
		key_ = new K(key); 
		value_ = new V(value); 
	}
	catch (std::bad_alloc bad_alloc)
	{
		throw AdtException(bad_alloc.what()); 
		
	}
}

template<class K, class V>
inline Pair<K, V>::Pair(const Pair & copy) noexcept(false)
{
	if (this != &copy)
		*this = copy; // this automatically deals with memory issues 
}

template <class K, class V>
Pair<K, V>::~Pair()
{
	if (key_ != nullptr) delete key_; 
	if (value_ != nullptr) delete value_; 
}

template<class K, class V>
inline Pair<K, V>& Pair<K, V>::operator=(const Pair<K, V>& rhs) noexcept(false)
{
	if (this != &rhs)
	{
		if (key_ != nullptr) delete key;
		if (value_ != nullptr) delete value_;
		try
		{
			key_ = new K(rhs.GetKey());
			value_ = new V(rhs.GetValue());
		}
		catch (bad_alloc bad_alloc)
		{
			throw AdtException(bad_alloc.what());
		}
	}
	return *this; 
}

template <class K, class V>
inline K Pair<K, V>::GetKey() noexcept
{
	return *key_; 
}

template <class K, class V>
inline K Pair<K, V>::GetKey() const noexcept
{
	return *key_;
}

template <class K, class V>
inline V Pair<K, V>::GetValue() noexcept
{
	return *value_;
}

template <class K, class V>
inline V Pair<K, V>::GetValue() const noexcept
{
	return *key_;
}

#endif
